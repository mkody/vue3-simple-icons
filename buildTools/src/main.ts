import { existsSync } from "https://deno.land/std@0.211.0/fs/mod.ts";
import { Command } from "https://deno.land/x/cliffy@v1.0.0-rc.3/command/mod.ts";
import * as simpleIconsSDK from "simple-icons/sdk";
import packageJson from "../package.json" with { type: "json" };
import { buildComponent, getComponentName } from "./component_builder.ts";
import { Brand, Icons } from "./types.ts";

const simpleIconsVersion = packageJson.dependencies["simple-icons"];
await new Command()
  .name("vue3-simple-icons-builder")
  .description(packageJson.description)
  .version(packageJson.version)
  .option("--target [target:file]", "Target folder", {
    default: "test",
  })
  .option("--simple-icons [simpleIcons:file]", "Path to simple-icons", {
    default: "node_modules/simple-icons",
  })
  .option("--info-json [infoJson:file]", "Path to infoJson.json", {
    default: "simple-icons.json",
  })
  .action(async ({ target, simpleIcons, infoJson }) => {
    const source = !simpleIcons
      ? "node_modules/simple-icons"
      : (simpleIcons as string);
    const finalTarget = !target ? "test" : (target as string);
    const jsonOutput = !infoJson ? "simple-icons.json" : (infoJson as string);
    await buildIcons(finalTarget, source, jsonOutput);
  })
  .parse(Deno.args);

async function buildIcons(
  targetFolder: string,
  sourceFolder: string,
  componentJson: string,
) {
  console.log(
    `Building vue3-simple-icons with simple-icons ${simpleIconsVersion} to ${targetFolder}...`,
  );
  if (
    !existsSync(sourceFolder, {
      isDirectory: true,
      isReadable: true,
    })
  ) {
    console.error(`Source folder ${sourceFolder} does not exist`);
    return;
  }
  if (
    !existsSync(targetFolder, {
      isDirectory: true,
      isReadable: true,
    })
  ) {
    console.info(`Source folder ${targetFolder} does not exist. Creating...`);
    await Deno.mkdir(targetFolder);
  } else {
    const targetFolderInfo = await Deno.stat(targetFolder);
    if (!targetFolderInfo.isDirectory) {
      console.error(`Target folder ${targetFolder} is not a directory`);
      return;
    }

    if (targetFolderInfo.size > 0) {
      // Delete all files in target folder
      console.log(`Deleting files in ${targetFolder}...`);
      for await (const dirEntry of Deno.readDir(targetFolder)) {
        await Deno.remove(`${targetFolder}/${dirEntry.name}`);
      }
    }
  }
  if (
    !existsSync(`${targetFolder}/components`, {
      isDirectory: true,
      isReadable: true,
    })
  ) {
    await Deno.mkdir(`${targetFolder}/components`);
  }

  /// Read _data/simple-icons.json
  const simpleIcons = await Deno.readTextFile(
    `${sourceFolder}/_data/simple-icons.json`,
  );
  const icons: Icons = JSON.parse(simpleIcons);

  console.log(`Found ${icons.icons.length} icons`);
  const components: Array<Component> = [];
  for (const icon of icons.icons) {
    const component = await buildIcon(icon, targetFolder, sourceFolder);
    components.push(component);
  }
  await buildIndex(components, targetFolder);
  const info: SimpleIconsInfoFile = {
    builtOn: new Date(),
    simpleIconsVersion: simpleIconsVersion,
    components,
  };
  await Deno.writeTextFile(componentJson, JSON.stringify(info, null, 2));
  console.log("Done");
}
interface SimpleIconsInfoFile {
  builtOn: Date;
  simpleIconsVersion: string;
  components: Component[];
}
interface Component {
  originalTitle: string;
  componentName: string;
  slug: string;
}
async function buildIndex(
  components: Component[],
  targetFolder: string,
): Promise<void> {
  console.log("Building index.ts...");
  let index = `
  // Path: ${targetFolder}/index.ts
  // Generated by vue3-simple-icons-builder at ${
    new Date().toISOString()
  } using simple-icons ${simpleIconsVersion}

  `;
  let exports = "";
  for (const component of components) {
    index +=
      `import ${component.componentName} from "./components/${component.componentName}.vue"; // ${component.originalTitle} component generated from ${component.slug}.svg\n`;
    exports += `\t\t${component.componentName},\n`;
  }

  index += `export {${exports}}`;

  await Deno.writeTextFile(`${targetFolder}/index.ts`, index);
}
async function buildIcon(
  icon: Brand,
  targetFolder: string,
  sourceFolder: string,
): Promise<Component> {
  const iconSlug = simpleIconsSDK.getIconSlug(icon);

  console.log(`Building ${icon.title} with slug ${iconSlug}...`);

  const file = await Deno.readTextFile(`${sourceFolder}/icons/${iconSlug}.svg`);
  const component = buildComponent(file);
  const componentName = getComponentName(icon);
  console.debug(`${icon.title} component name is ${componentName}`);
  const componentPath = `${targetFolder}/components/${componentName}.vue`;

  console.log(`Writing ${componentPath}...`);
  Deno.writeTextFile(componentPath, component);

  return {
    originalTitle: icon.title,
    componentName: componentName,
    slug: iconSlug,
  };
}
